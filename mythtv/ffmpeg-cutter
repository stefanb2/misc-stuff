#!/usr/bin/perl -w
use 5.030;
use strict;
use warnings;

use DBI;
use File::Spec;
use Getopt::Long;
use MythTV;
use POSIX qw(:sys_resource_h);

###############################################################################
#
# Update job informationpackage
#
###############################################################################
# See https://www.mythtv.org/wiki/Jobqueue_table
use constant JOB_STATUS_RUNNING  => 0x0004;
use constant JOB_STATUS_FINISHED => 0x0110;
use constant JOB_STATUS_ERRORED  => 0x0130;
sub update_job($$$$) {
    my($dbh, $id, $status, $comment) = @_;

    if ($dbh && $id) {
	my $sth = $dbh->prepare(
	    <<END_OF_UPDATE
UPDATE jobqueue
    SET
	status     = ?,
	comment    = ?,
	statustime = CURRENT_TIME
    WHERE
	id = ?
END_OF_UPDATE
	    );
	$sth->execute($status, $comment, $id);
    } else {
	print "PROGRESS (${status}): ${comment}\n";
    }
}

use constant ERROR_INVALID_DATA   => 10;
use constant ERROR_COMMAND_FAILED => 20;
use constant ERROR_IO             => 30;
sub abort($$$$) {
    my($dbh, $id, $rc, $msg) = @_;
    update_job($dbh, $id, JOB_STATUS_ERRORED, $msg);
    exit($rc);
    # does not return
}

sub finished($$$) {
    my($dbh, $id, $msg) = @_;
    update_job($dbh, $id, JOB_STATUS_FINISHED, $msg);
    exit(0);
    # does not return
}

sub progress($$$) {
    my($dbh, $id, $msg) = @_;
    update_job($dbh, $id, JOB_STATUS_RUNNING, $msg);
}

sub run_command($$$) {
    my($dbh, $id, $cmd) = @_;
    system(@{ $cmd }) == 0
	or abort($dbh, $id, ERROR_COMMAND_FAILED, "system '@{ $cmd }' failed: $?");
}

###############################################################################
#
# Cut list handling
#
###############################################################################
sub detect_avg_framerate($$$) {
    my($dbh, $id, $file) = @_;

    progress($dbh, $id, "detecting frame rate from '${file}'");

    abort($dbh, $id, ERROR_COMMAND_FAILED, "can't run ffprobe on '${file}': $!")
	unless open(my $fh, "ffprobe -threads 0 -loglevel fatal -select_streams v:0 -show_entries stream=avg_frame_rate -of flat ${file} |");
    my $fps;
    while (<$fh>) {
	if (my($num, $density) = m,^streams\.stream\.0\.avg_frame_rate="(\d+)/(\d+)",) {
	    $fps = 1.0 * $num / $density;
	    # NOTE: formatted to match line above
	    progress($dbh, $id, "detected  frame rate of   '${file}' is ${fps}");
	}
    }
    abort($dbh, $id, ERROR_COMMAND_FAILED, "ffprobe failed on '${file}': $!")
	unless close($fh);
    abort($dbh, $id, ERROR_INVALID_DATA, "couldn't detect frame rate for '${file}'")
	unless $fps;

    return $fps;
}

use constant TYPE_CUT_END   => 0;
use constant TYPE_CUT_START => 1;
sub get_recording_cutlist($$$$) {
    my($dbh, $id, $basename, $fps) = @_;

    progress($dbh, $id, "fetching cut list");

    my $sth = $dbh->prepare(
	<<END_OF_SELECT
SELECT type, mark
    FROM recordedmarkup, recorded
    WHERE
        recorded.basename  = ?                        AND
        recorded.chanid    = recordedmarkup.chanid    AND
        recorded.starttime = recordedmarkup.starttime AND
	type IN (0, 1)
    ORDER BY mark
END_OF_SELECT
	);
    $sth->execute($basename);

    my @cutlist;
    if ($sth->rows > 0) {
	my $end_frame = 0; # cut list can start with TYPE_CUT_START
	my $start_frame;
	while (my $aref = $sth->fetchrow_arrayref) {
	    #print "ROW @{ $aref }\n";
	    my($type, $frame) = @{ $aref };
	    if      ($type eq TYPE_CUT_END) {
		$end_frame = $frame;
		undef $start_frame;

	    } elsif ($type eq TYPE_CUT_START) {
		abort($dbh, $id, ERROR_INVALID_DATA, "cut start ${frame} without preceeding cut end")
		    unless defined $end_frame;

		$start_frame = $frame;
		push(@cutlist, [
			 1.0 * $end_frame   / $fps,
			 1.0 * $start_frame / $fps
		     ]);

		undef $end_frame;
	    } else {
		abort($dbh, $id, ERROR_INVALID_DATA, "invalid type '${type}' (${frame}) for recording '${basename}'");
	    }
	}

	# open-ended cut list, i.e. include everything from here to end
	if (defined $end_frame) {
	    push(@cutlist, [1.0 * $end_frame / $fps]);
	}

	#print "[\"$_->[0]\", \"$_->[1]\"],\n" foreach @cutlist;
    }

    return \@cutlist;
}

sub generate_cutlist($$$$) {
    my($dbh, $id, $file, $basename) = @_;
    my $fps = detect_avg_framerate($dbh, $id, $file);
    return get_recording_cutlist($dbh, $id, $basename, $fps);
}

###############################################################################
#
# ffmpeg processing
#
###############################################################################
sub recording_split($$$$$$) {
    my($dbh, $id, $dir, $file, $basename, $cutlist) = @_;
    my $cuts     = @{ $cutlist };
    my @files;

    foreach my $index (0..$#{ $cutlist }) {
	progress($dbh, $id, "creating chunk for cut " . ($index + 1) . "/${cuts}");

	my @times   = @{ $cutlist->[$index] };
	my @options = ('-ss', $times[0]);
	if (defined $times[1]) {
	    push(@options, '-to', $times[1]);
	}

	my $chunk   = File::Spec->catfile(
	    $dir,
	    sprintf("%02d_${basename}", $index)
	);
	run_command($dbh, $id, [
	    qw(ffmpeg -y -threads 0 -loglevel fatal -nostats -hide_banner),
	    # read section from input file
	    @options,
	    '-i',  $file,
	    # write section to output file
	    qw(-map 0 -c copy -copyts -start_at_zero),
	    @options,
	    $chunk,
	]);

	push(@files, $chunk);
    }

    return \@files;
}

sub recording_merge($$$$$$) {
    my($dbh, $id, $dir, $file, $basename, $files) = @_;
    my $cuts = @{ $files };

    progress($dbh, $id, "merging ${cuts} chunks to new recording");

    # create input file for merge
    my $filelist = "${file}.txt";
    open(my $ofh, '>', $filelist)
	or abort($dbh, $id, ERROR_IO, "can't open file list '${filelist}': $!");
    print $ofh "file '$_'\n" foreach @{ $files };
    close($ofh)
	or abort($dbh, $id, ERROR_IO, "write to file list '${filelist}' failed: $!");

    # merge chunks to new output file
    my $outfile = File::Spec->catfile($dir, "NEW_${basename}");
    run_command($dbh, $id, [
	qw(ffmpeg -y -threads 0 -loglevel fatal -nostats -hide_banner -f concat -safe 0 -i), $filelist,
	qw(-map 0 -c copy), $outfile
    ]);

    # remove temporary files
    progress($dbh, $id, "cleaning up temporary files");
    unlink(@{ $files }, $filelist);

    return $outfile;
}

sub recording_replace($$$$) {
    my($dbh, $id, $oldfile, $newfile) = @_;

    progress($dbh, $id, "replacing original recording");

    # replace original with new file
    rename($oldfile, "${oldfile}.ORIG");
    rename($newfile, $oldfile);

    progress($dbh, $id, "replacing original recording");
}

sub recording_clear_lists($$$) {
    my($dbh, $id, $file) = @_;
    my @cmd = (qw(mythutil --quiet --video), $file);

    progress($dbh, $id, "clearing cut/commercial lists for recording '${file}'");
    run_command($dbh, $id, [@cmd, '--clearcutlist']);
    run_command($dbh, $id, [@cmd, '--clearskiplist']);

}

sub recording_rebuild_index($$$$) {
    my($dbh, $id, $file, $basename) = @_;

    progress($dbh, $id, "rebuilding index for recording '${file}'");
    run_command($dbh, $id, [
	qw(mythcommflag --quiet --rebuild --noprogress --file), $file
    ]);

    # reset commflagged count
    my $sth = $dbh->prepare(
	<<END_OF_COMMFLAGGED
UPDATE recorded
    SET commflagged = 0
    WHERE
	basename = ?
END_OF_COMMFLAGGED
	);
    $sth->execute($basename);
    # ignore errors
}

###############################################################################
#
# Main program
#
###############################################################################
# command line processing
my %Options;
GetOptions(\%Options,
	   "file=s",
	   "jobid=i",
    ) or die "error in command line arguments\n";

die "mandatory parameter is missing\n"
    unless defined $Options{file};

# lower priority of our processes
setpriority(PRIO_PROCESS, 0, -20);

# connect to mythtv database
my $Myth = new MythTV({connect => 0});
my $dbh  = $Myth->{dbh};

my($file, $id) =
    @Options{qw(file jobid)};
my(undef, $dir, $basename) = File::Spec->splitpath(File::Spec->rel2abs($file));

# get cut list
my $cutlist = generate_cutlist($dbh, $id, $file, $basename);
unless (@{ $cutlist }) {
    finished($dbh, $id, "no cut list found for recording '${file}'.");
}

# split, merge & replace
my $files   = recording_split($dbh, $id, $dir, $file, $basename, $cutlist);
my $newfile = recording_merge($dbh, $id, $dir, $file, $basename, $files);
recording_replace($dbh, $id, $file, $newfile);

# update MythTV information for new recording
recording_clear_lists($dbh, $id, $file);
recording_rebuild_index($dbh, $id, $file, $basename);

my $chunks = @{ $files };
finished($dbh, $id, "${chunks} part(s) have been merged for recording '${file}'.");
